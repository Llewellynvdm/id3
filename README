
       id3 - a commandline ID3 mass tagger        _)      | __ /
                                                   |   _` |  _ \
                                                  _| \__,_| ___/
 _  ._  _ ._  _   _
_>\/| |(_)|_)_>\/_>
~~/~~~~~~~|~~~~/~~~
       id3 [-v] [-12] [-d] [-t title] [-a artist] [-g genre]
        [-n tracknr] [-l album] [-y year] [-c comment]
        [-!]  [-s size] [-rFRAME] [-wFRAME data]
        [-f filename] [-m pattern] [-q string] [ "filespec" ... ]

 _| _  _ _._o.__|_o _ ._
(_|(/__>(_| ||_)|_|(_)| |
~~~~~~~~~~~~~|~~~~~~~~~~~
       id3  is  a  mass tagger for audio files. This means it is
       intended  to  be  used  for  non-interactively performing
       operations  on  the  meta-data  in a number of files with
       just a single command.

       Operations  performed  might consist of replacing certain
       fields,  or  adding, replacing, or removing all meta-data
       present in an audio file.

       To  take  advantage  of  this,  it has the ability to use
       portions of the filenames to fill in portions of the tag.

       id3  currently  supports  the  old-style  ID3 format with
       track-number  extension  (ID3  v1.1), as well as the more
       complicated  ID3v2  (ID3  v2.3.0) format. This also means
       use  is  pretty  much  limited  to  audio files which use
       these formats, e.g, MPEG-1 Layer III.

 _ .__|_o _ ._  _
(_)|_)|_|(_)| |_>
~~~|~~~~~~~~~~~~~
       Order of the options is only important where specified.

       filespec ...
            specifies the file(s) to be affected by the command.

            If  you  use wildcards, it is recommended to enclose
            the  specification  in  double  quotes (""). id3 has
            internal  shell pattern matching which will not work
            if your shell performs this function.

            The  shell  pattern  matching can be applied to both
            filenames and directory names.

       -h   show commandline help

       -V   display version number and copyright

       -v   be verbose

       -1   write ID3 v1 tags (default). See `-2'.

       -2   write  ID3 v2 tags. If both -1 and -2 are specified,
            both tag formats will be written.

       -d   do  not  re-use  existing  tag  data.  If no new tag
            information  is  specified in conjunction with this,
            all selected tags will be removed.

       -t "title"
       -a "artist"
       -l "album"
       -n "tracknr"
       -y "year"
       -c "comment"
       -g "genre"
            add/replace  the  specified  fields  in all selected
            tags with the values given. Field values are scanned
            for substitution commands, see SUBSTITUTION below.

            Genres  can  be  specified  either  directly or with
            their assigned number, regardless of tag format.

       -f "filename-template"
            rename     files     encountered     according    to
            `filename-template'.  The  argument  is  scanned for
            substitution  commands,  and empty variables will by
            default  get  replaced  with  the  string "Unknown".
            Trying  to  rename  to an already existing file will
            cause an error.

       -m "filename-template"
            the  reverse  of  -f;  process  all files that match
            `filename-template',  setting  the  tag accordingly.
            For example, `-m "%a - %t.mp3"' is shorthand for
            `-a %1 -t %2 "* - *.mp3"'

       -q "format"
            for each file encountered, `format' will get scanned
            for  substitution  commands, and written to standard
            output.

       The  following  options  operate on the last tag selected
       before them, and only have meaning where relevant.

       -!   fill  all  standard tag fields with information from
            the   source   tag.   This  is  similar  to  writing
            `-talnygc  %t  %a %l %n %y %g %c', but only operates
            on  the  most  recent  tag.  It  is possible for the
            source and destination tag to be the same.

       -s size
            try  to  write a new tag using exactly `size' bytes,
            adding / removing padding as necessary.

       -rFRAME
            remove  all occurrences of frames named `FRAME' from
            the  tag. Consult the format documentation for valid
            `FRAME' names.

       -wFRAME data
            add  /  update  a frame named `FRAME' with `data' in
            the   tag.   `data'   is  scanned  for  substitution
            commands.  Again,  consult the format documentation.
            See `COMPATIBILITY' for more information.

       Individual  options  can  be stacked in a single argument
       for more convenience. For example, running

          id3 -2 -dalt "Artist" "Album" "Title" *.mp3

       is equivalent to:

          id3 -2 -d -a "Artist" -l "Album" -t "Title" *.mp3

 _   |_  __|_o_|_  _|_o _ ._
_>|_||_)_> |_| |_|_||_|(_)| |
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
       id3  can perform `printf-like' substitution on the values
       prior  to writing them to a tag. Note that if you want to
       use  pattern  matching,  you HAVE TO enclose the wildcard
       specification  on  the  commandline  in  double quotes to
       prevent your shell from expanding any wildcards.

       4dos/4nt  users  may also need to double any occurrence of
       the  %  character,  or  enclose strings containing one in
       backquotes, to prevent the environment from replacing it.

      `%<modifiers>N' where N <- [0..9]
            replaced  with  the portion of the filename matching
            the Nth `*' wildcard in the file specification. 0 is
            taken to mean 10.

      `%<modifiers>c' where c <- [a..z]
            replaced by values according to the following table:

            %t title
            %a artist
            %g genre
            %n track number
            %l album title
            %y year
            %c comment field
            %f filename
            %x auto-increasing counter

            All  values  get  read  (where  applicable) from the
            source  tag,  which  is  specified  by the left-most
            specified  tag  format  on  the  command  line,  and
            reflect   the   state   of   the   file  before  any
            modifications  were  made. Similarly, `%f' is always
            the original filename. The `%x' value gets increased
            each  time  it is substituted, and is intended to be
            used for auto-numbering.

      `%%'  replaced with a single `%'

      `%,'  replaced with the newline ('\n') character

       Available <modifiers> (optional):

       "+" (plus sign)
                   Capitalize the substituted value
       "-" (minus sign)
                   Convert all characters to lowercase
       "_" (underscore)
                   Do  not  replace underscores with spaces, and
                   do not compress empty space.
       "#" (hash or pound sign)
                   Prefix a zero before the substituted value to
                   pad it out, if necessary. Multiple hash signs
                   can be stacked for more padding. Intended for
                   numeric fields only.
       "|fallback|"
                   If  substitution  would yield an empty value,
                   substitute     with    `fallback'    instead.
                   `fallback'    itself    may   contain   other
                   substitutions,  but no other | (pipe) symbols
                   or fallbacks.

 _    _.._ _ ._ | _  _
(/_><(_|| | ||_)|(/__>
~~~~~~~~~~~~~|~~~~~~~~

       $ id3 -a "Stallman" -t "Free Software Song" fs_song.mp3
            Add a simple tag to a file.

       $ id3 -d *.mp3
            Removes all ID3v1 tags from all mp3's.

       $ id3 -2 -1! fs_song.mp3
            Copy  ID3v2  tag  to  ID3v1  tag  in  selected file.

       $ id3 -a "TAFKAT" -n "%1" -t "%c2" "*. *.mp3"
            Sets tag fields correspondingly:
             01. my_song.mp3  [=>] "01" "My Song"
             02. untitled.mp3 [=>] "02" "Untitled" etc..

       $ id3 -2 -f "%a - %t.mp3" blaet.mp3
            Rename  file  to  a  standard  format,  using  ID3v2
            values.

       $ id3 -2 -rAPIC -s 0 *.mp3
            Removes embedded images and padding from all mp3's.

       $ id3 -2 -!d *.mp3
            Rewrite ID3v2 tag, removing spaces, keeping only the
            basic fields.

       $ id3 -2 -wUSLT "foo, bar%,lalala!%," blaet.mp3
            Adds an ID3v2 lyric frame to blaet.mp3.

       $ id3 -v -g alt-rock -alnt "The Author" %1 %2 %3 "Author - */(*) *.mp3"
            Process multiple directories at once.

       $ id3 -1 -2! -c "Was: %f" -f "%|TAFKAT|a - %|Untitled (%x)|t.mp3" "*.mp3"
            More  advanced rename. Save previous filename in the
            comment field, and copies ID3v1 to ID3v2.

._  __|_ _  _
| |(_)|_(/__>
~~~~~~~~~~~~~
       The internal pattern matching emulates the normal pattern
       matching of `sh'. It supports ?, * and [].

       A shell pattern will never match a forward slash (`/') or
       a  dot  (`.') beginning a filename. Wildcards can be used
       for  directories  as well (to arbitrary depths), in which
       case a search will be performed.

       In  an  ambiguous  situation,  the  pattern  matcher will
       always  resolve  a  `*' wildcard to the shortest possible
       sequence  of  tokens.  This  differs  from  the  standard
       behavior of regular expressions, however it tends to make
       sense in the context of filenames.

       E.g.: `*_*', `1_foo_bar' -> %1 == `1', not `1_foo'.

       Do  NOT  add ID3 tags to files for which it does not make
       sense,  i.e,  add  them only to MP3 files. In particular,
       do  not  add  ID3v2  tags  to Ogg files, since ID3v2 tags
       start  at  the  beginning  of the file, thereby resulting
       in  corrupted  Ogg  files.  Support for the Ogg container
       format is planned in a future release.

       I  discourage  using  ID3v2  tags if not truly necessary.
       Working  with  ID3v2 tags might involve copying sensitive
       data  several  times,  introducing possible opportunities
       for  data  corruption and file fragmentation. And because
       ID3v2  is  complex,  program code is complex, and as such
       more likely to contain errors.

       ID3v2  goes  way  beyond the demands of simple meta-data,
       and  tries  to  support embedding general purpose data in
       places where it shouldn't be. Do not use it this way.

 _ _ ._ _ ._  _._|_o|_ o|o_|_
(_(_)| | ||_)(_| |_||_)||| |_\/
~~~~~~~~~~|~~~~~~~~~~~~~~~~~~/~
       id3  has a built-in genre list of 148 genres. If you pass
       the  -g parameter a string instead of a number when using
       ID3v1,  id3  tries  to  find  the specified genre in this
       list,  and  selects  the closest possible match (if any).
       For  the  genre numbers and exact spelling, see `id3v1.c'
       in  the source distribution. An empty or invalid genre is
       assigned the number 0.

       The  -wFRAME  parameter  only  knows  the following ID3v2
       frames:  Txxx  (text), Wxxx (links), COMM (comment), IPLS
       (involved  people),  USLT  (lyrics),  USER (tos) and PCNT
       (numeric play counter). It is a no-op for ID3v1.

       id3  does not support ID3v2 v2.0 or earlier, neither does
       it  support  the  new ID3v2 v4.0 (yet?). It also does not
       support ID3v2 features as compression, encryption, ...

 _.  _|_|_  _ .__
(_||_||_| |(_)|_>
~~~~~~~~~~~~~~~~~
       squell ^ zf! (squell@goth.net, squell@alumina.nl)
